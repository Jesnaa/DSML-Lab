identity matrix and random matrix


import numpy as np

a = np.array([1, 2, 3])   # Create a rank 1 array
print("type: %s" %type(a))            # Prints "<class 'numpy.ndarray'>"
print("shape: %s" %a.shape)            # Prints "(3,)"
print(a[0], a[1], a[2])   # Prints "1 2 3"
a[0] = 5                  # Change an element of the array
print(a)                  # Prints "[5, 2, 3]"

b = np.array([[1,2,3],[4,5,6]])    # Create a rank 2 array
print("\n shape of b:",b.shape)                     # Prints "(2, 3)"
print(b[0, 0], b[0, 1], b[1, 0])   # Prints "1 2 4"

a = np.zeros((2,2))   # Create an array of all zeros
print("All zeros matrix:\n  %s" %a)              # Prints "[[ 0.  0.]
                      #          [ 0.  0.]]"

b = np.ones((1,2))    # Create an array of all ones
print("\nAll ones matrix:\n  %s" %b)              # Prints "[[ 1.  1.]]"

d = np.eye(2)         # Create a 2x2 identity matrix
print("\n identity matrix: \n%s"%d)              # Prints "[[ 1.  0.]
                      #          [ 0.  1.]]"

e = np.random.random((2,2))  # Create an array filled with random values
print("\n random matrix: \n%s"%e)


Outer product: and Dot product:

import numpy as np
a = np.arange(4)
b = np.arange(4)
print(a)
print(b)

dp = np.dot(a,b)
print("Dot product: %s\n" %dp)
op = np.outer(a,b)
print("\n Outer product: %s\n" %op)
ep = np.multiply(a, b)

print("\n Element Wise product: %s \n" %ep)






#vectorized sum
print("Vectorized sum example\n")
x = np.array([[1,2],[3,4]])
print("x:\n %s" %x)
print("sum: %s"%np.sum(x))  # Compute sum of all elements; prints "10"
print("sum axis = 0: %s" %np.sum(x, axis=0))  # Compute sum of each column; prints "[4 6]"
print(" sum axis = 1: %s" %np.sum(x, axis=1))  # Compute sum of each row; prints "[3 7]"


#matrix dot product
a = np.arange(10000)
b = np.arange(10000)

dp = np.dot(a,b)

print("Dot product: %s\n" %dp)

#outer product
op = np.outer(a,b)
print("\n Outer product: %s\n" %op)

#elementwise product

ep = np.multiply(a, b)

print("\n Element Wise product: %s \n" %ep)



Transpose

import numpy as np

x = np.array([[1,2], [3,4]])
print("Original x: \n%s " %x)    # Prints "[[1 2]
            #          [3 4]]"
print("\nTranspose of x: \n%s" %x.T)  # Prints "[[1 3]
            #          [2 4]]"




